/**
I've put these algorithms together from the suggested further reading "The Nature Of Code" by Daniel Shiffman.
 Shifftman in turn got these steering behaviour algorithms from Craig Reynolds, who developed these in the late 80s.
 **/

// These JSDoc are just generated by my IDE (IntelliJ);

/**
 *
 * @param agent
 * @param targetVec
 * @param _multiplier
 */
function seek(agent, targetVec, _multiplier = 1) {

    let desiredVel = p5.Vector.sub(targetVec, agent.pos);
    desiredVel.normalize();
    desiredVel.mult(agent.maxSpeed);

    let steerForce = p5.Vector.sub(desiredVel, agent.velocity);
    steerForce.limit(agent.maxForce);
    steerForce.mult(_multiplier);

    applyForce(agent, steerForce);
}

/**
 *
 * @param agent
 * @param predatorLoc
 * @param _multiplier
 */
function flee(agent, predatorLoc, _multiplier = 1) {

    let desiredVel = p5.Vector.sub(predatorLoc, agent.pos);
    desiredVel.normalize();
    desiredVel.mult(agent.maxSpeed * -1);

    let steerForce = p5.Vector.sub(desiredVel, agent.velocity);
    steerForce.limit(agent.maxForce);
    steerForce.mult(_multiplier);

    applyForce(agent, steerForce);
}

/**
 *
 * @param agent
 * @param targetVec
 * @param _multiplier
 */
function seekAndArrive(agent, targetVec, _multiplier = 1) {

    let desired = p5.Vector.sub(targetVec, agent.pos);
    const d = desired.mag();
    desired.normalize();

    if (d < 100) {

        let m = map(d, 0, 100, 0, agent.maxSpeed);
        desired.mult(m);
    }
    else {

        desired.mult(agent.maxSpeed);
    }

    const steerForce = p5.Vector.sub(desired, agent.velocity);
    steerForce.limit(agent.maxForce);
    steerForce.mult(_multiplier);

    applyForce(agent, steerForce);
}

/**
 *
 * @param agent
 * @param _multiplier
 * @returns {*}
 */
function wander(agent, _multiplier = 1) {

    // My understanding for this algorithm comes from this really great explanation.
    // https://gamedevelopment.tutsplus.com/tutorials/understanding-steering-behaviors-wander--gamedev-1624

    let center = agent.velocity.copy();
    center.normalize();

    let displacement = createVector(0, -1);
    displacement.mult(WANDER_RANDOM_MULTIPLIER);

    const len = displacement.mag();

    displacement.x = random(sinList) * len;
    displacement.y = random(cosList) * len;
    center.add(displacement);
    center.mult(_multiplier);

    applyForce(agent, center);
}

/**
 *
 * @param agent
 * @param forceVec
 */
function applyForce(agent, forceVec) {

    agent.acceleration.add(forceVec);
}
